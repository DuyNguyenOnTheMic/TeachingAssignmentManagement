@model TeachingAssignmentManagement.Models.term

@{
    Layout = null;
}

@using (Html.BeginForm("Edit", "Term", FormMethod.Post, new { onsubmit = "return submitForm(this)", id = "term-form" }))
{
    <div class="mb-1">
        <label class="form-label font-small-4" for="id">Học kỳ: </label>
        @Html.EditorFor(model => model.id, new { htmlAttributes = new { @type = "number", @class = "form-control", @aria_label = "Nhập học kỳ (VD: 221)", @disabled = "@disabled" } })
    </div>

    <div class="mb-1">
        <label class="form-label font-small-4" for="start_year">Năm bắt đầu: </label>
        <select class="year-select form-select" id="start_year" name="start_year" aria-label="Chọn năm bắt đầu"></select>
    </div>

    <div class="mb-1">
        <label class="form-label font-small-4" for="end_year">Năm kết thúc: </label>
        <select class="year-select form-control" id="end_year" name="end_year" aria-label="Chọn năm kết thúc"></select>
    </div>

    <div class="mb-1">
        <label class="form-label font-small-4" for="start_week">Tuần bắt đầu: </label>
        <div class="input-group">
            @Html.EditorFor(model => model.start_week, new { htmlAttributes = new { @type = "number", @class = "touchspin-min-max", @aria_label = "Nhập tuần bắt đầu" } })
        </div>
    </div>

    <div class="mb-1">
        <label class="form-label font-small-4" for="start_date">Ngày bắt đầu: </label>
        @Html.EditorFor(model => model.start_date, new { htmlAttributes = new { @class = "form-control picker flatpickr-input", @placeholder = "Chọn ngày bắt đầu", @aria_label = "Chọn ngày bắt đầu" } })
    </div>

    <div class="float-end m-1">
        <button type="button" class="btn btn-outline-secondary waves-effect me-1" id="btnClose">Huỷ</button>
        <button type="submit" class="btn btn-primary waves-effect waves-float waves-light">Lưu</button>
    </div>
}

<link rel="stylesheet" type="text/css" href="~/app-assets/css/plugins/forms/form-validation.min.css" />
<script src="~/assets/js/form-validation.min.js"></script>
<script>

    var yearSelect = $('.year-select'),
        touchspin = $('.touchspin'),
        picker = $('.picker');

    var currentYear = (new Date()).getFullYear();
    yearSelect.each(function () {
        // Select2 without search bar
        var $this = $(this);
        $this.wrap('<div class="position-relative"></div>');
        $this.select2({
            dropdownAutoWidth: true,
            dropdownParent: $this.parent(),
            minimumResultsForSearch: Infinity
        });
        // Create year dropDownList.
        for (var i = currentYear; i <= currentYear + 10; i++) {
            $this.append('<option value="' + i + '">' + i + '</option>');
        }
    });

    // Default Spin
    touchspin.TouchSpin({
        buttondown_class: 'btn btn-primary',
        buttonup_class: 'btn btn-primary',
        buttondown_txt: feather.icons['minus'].toSvg(),
        buttonup_txt: feather.icons['plus'].toSvg()
    });

    var touchspinValue = $('.touchspin-min-max'),
        counterMin = 1,
        counterMax = 52;
    if (touchspinValue.length > 0) {
        touchspinValue
            .TouchSpin({
                min: counterMin,
                max: counterMax,
                buttondown_txt: feather.icons['minus'].toSvg(),
                buttonup_txt: feather.icons['plus'].toSvg()
            })
            .on('touchspin.on.startdownspin', function () {
                var $this = $(this);
                $('.bootstrap-touchspin-up').removeClass('disabled-max-min');
                if ($this.val() == counterMin) {
                    $(this).siblings().find('.bootstrap-touchspin-down').addClass('disabled-max-min');
                }
            })
            .on('touchspin.on.startupspin', function () {
                var $this = $(this);
                $('.bootstrap-touchspin-down').removeClass('disabled-max-min');
                if ($this.val() == counterMax) {
                    $(this).siblings().find('.bootstrap-touchspin-up').addClass('disabled-max-min');
                }
            });
    }

    // Custom vietnamese language for flatpickr
    var vn = {
        weekdays: {
            shorthand: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"],
            longhand: [
                "Chủ nhật",
                "Thứ hai",
                "Thứ ba",
                "Thứ tư",
                "Thứ năm",
                "Thứ sáu",
                "Thứ bảy",
            ],
        },

        months: {
            shorthand: [
                "Th1",
                "Th2",
                "Th3",
                "Th4",
                "Th5",
                "Th6",
                "Th7",
                "Th8",
                "Th9",
                "Th10",
                "Th11",
                "Th12",
            ],
            longhand: [
                "Tháng một",
                "Tháng hai",
                "Tháng ba",
                "Tháng tư",
                "Tháng năm",
                "Tháng sáu",
                "Tháng bảy",
                "Tháng tám",
                "Tháng chín",
                "Tháng mười",
                "Tháng mười một",
                "Tháng mười hai",
            ],
        },
        firstDayOfWeek: 1
    };

    // Picker
    if (picker.length) {
        picker.flatpickr({
            locale: vn,
            altInput: true,
            altFormat: "j F, Y",
            dateFormat: "d/m/y",
            defaultDate: toDate('#start_date'),
            onReady: function (selectedDates, dateStr, instance) {
                if (instance.isMobile) {
                    $(instance.mobileInput).attr('step', null);
                }
            },
        });
    }

    // Convert string to date
    function toDate(selector) {
        var from = $(selector).val().split("/");
        return new Date(from[2], from[1] - 1, from[0]);
    }
</script>